#!/usr/bin/env groovy
pipeline {

    agent any
    environment {
        
        GIT_TAG_COMMIT = sh(script: 'git describe --tags --always', returnStdout: true).trim()
        NEW_VERSION = '1.0'
        JIRA_SITE='JIRA'
        GIT_COMMIT_MSG = sh(script: 'git log -1 --oneline')
        GIT_COMMIT_AUTHOR = sh(script: 'git log --format="medium" -1 ${GIT_COMMIT}')
        GIT_COMMIT_PRETTY = sh(script: 'git log -1 --pretty=%B' , returnStdout: true).trim()
        GIT_BRANCH = sh(script: 'git branch' , returnStdout: true).trim()
        }
  
    stages {
        stage ('Build') {
            steps {
                        
                echo 'This is a minimal pipeline.'
             
                echo " is GIT_TAG_COMMIT ${GIT_TAG_COMMIT}"
               
                echo "Commit msg is: ${GIT_COMMIT_MSG}"
               
                echo "author hash is: ${GIT_COMMIT_PRETTY}"
               
                echo "building project here for : ${GIT_BRANCH}"

                echo "testingn new ticket no. TEST-5"

                echo " ENVIRONMENT VARIABLE before PYTHON BUILD ${env.PATH_TO_ARTIFCT}"
                // sh '''
                //     python project.py
                //     echo $PATH_TO_ARTIFCT
                // '''
                script{
                    def outputs = sh(script: 'python project.py', returnStdout: true)
                    def  output = outputs.split('\n')
                }
                echo "ENVIRONMENT VARIABLE after PYTHON BUILD  ${output}"
                
            
            }
        }
        
        stage('JIRA') {
            steps{
                 script{
                        def serverInfo = jiraGetServerInfo()
                        echo serverInfo.data.toString()
                        println "${GIT_COMMIT_PRETTY}".tokenize("-")
                        "${GIT_COMMIT_PRETTY}".tokenize(",").each {
                                println "Number ${it}"
                                def strs = it.split(":")
                                println "strs ${strs}"
                                if(strs.length > 2)
                                {
                                    echo "wrong msg format it should be (JIRA_TICKET: msg for commit) "
                                    throw e
                                }else
                                {
                                    def searchResults = jiraJqlSearch jql: "project = TEST AND issuekey = '${strs[0]}'"
                                    def issues = searchResults.data.issues
                                    
                                    jiraAddComment idOrKey: "${strs[0]}", comment: "${strs[1]}"
                                    def transitions = jiraGetIssueTransitions idOrKey: "${strs[0]}"
                                    echo transitions.data.toString()
                                    def transitionInput = [ transition: [ id: '31'] ]
                                    jiraTransitionIssue idOrKey: "${strs[0]}", input: transitionInput, site: 'JIRA'
                                }
                                
                                
                            }
                        
                 }
            }
        }
       
    }
    
}